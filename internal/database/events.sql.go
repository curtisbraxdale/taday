// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: events.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (id, user_id, created_at, updated_at, start_date, end_date, title, description, priority, recur_d, recur_w, recur_m, recur_y)
VALUES (
    gen_random_uuid(),
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
)
RETURNING id, user_id, created_at, updated_at, start_date, end_date, title, description, priority, recur_d, recur_w, recur_m, recur_y
`

type CreateEventParams struct {
	UserID      uuid.UUID
	StartDate   time.Time
	EndDate     time.Time
	Title       string
	Description sql.NullString
	Priority    bool
	RecurD      bool
	RecurW      bool
	RecurM      bool
	RecurY      bool
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		arg.Title,
		arg.Description,
		arg.Priority,
		arg.RecurD,
		arg.RecurW,
		arg.RecurM,
		arg.RecurY,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartDate,
		&i.EndDate,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.RecurD,
		&i.RecurW,
		&i.RecurM,
		&i.RecurY,
	)
	return i, err
}

const deleteEvents = `-- name: DeleteEvents :exec
DELETE FROM events
`

func (q *Queries) DeleteEvents(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteEvents)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, user_id, created_at, updated_at, start_date, end_date, title, description, priority, recur_d, recur_w, recur_m, recur_y FROM events WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartDate,
		&i.EndDate,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.RecurD,
		&i.RecurW,
		&i.RecurM,
		&i.RecurY,
	)
	return i, err
}

const getEventsByUserID = `-- name: GetEventsByUserID :many
SELECT id, user_id, created_at, updated_at, start_date, end_date, title, description, priority, recur_d, recur_w, recur_m, recur_y FROM events WHERE user_id = $1
`

func (q *Queries) GetEventsByUserID(ctx context.Context, userID uuid.UUID) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartDate,
			&i.EndDate,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.RecurD,
			&i.RecurW,
			&i.RecurM,
			&i.RecurY,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilteredEvents = `-- name: GetFilteredEvents :many
SELECT id, user_id, created_at, updated_at, start_date, end_date, title, description, priority, recur_d, recur_w, recur_m, recur_y
FROM events
WHERE events.user_id = $1
  AND ($2::timestamptz IS NULL OR start_date >= $2)
  AND ($3::timestamptz IS NULL OR start_date < $3)
  AND (
      $4::text IS NULL OR
      EXISTS (
          SELECT 1 FROM event_tags et
          JOIN tags t ON t.id = et.tag_id
          WHERE et.event_id = events.id AND t.name = $4
      )
  )
`

type GetFilteredEventsParams struct {
	UserID    uuid.UUID
	StartDate time.Time
	EndDate   time.Time
	Tag       string
}

func (q *Queries) GetFilteredEvents(ctx context.Context, arg GetFilteredEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getFilteredEvents,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		arg.Tag,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartDate,
			&i.EndDate,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.RecurD,
			&i.RecurW,
			&i.RecurM,
			&i.RecurY,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
