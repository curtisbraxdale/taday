// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, username, email, hashed_password, phone_number)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3,
    $4
)
RETURNING id, created_at, updated_at, username, email, hashed_password, phone_number, stripe_customer_id
`

type CreateUserParams struct {
	Username       string
	Email          string
	HashedPassword string
	PhoneNumber    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
		arg.PhoneNumber,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.PhoneNumber,
		&i.StripeCustomerID,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUsers)
	return err
}

const getEmail = `-- name: GetEmail :one
SELECT email FROM users WHERE id = $1
`

func (q *Queries) GetEmail(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getEmail, id)
	var email string
	err := row.Scan(&email)
	return email, err
}

const getStripeID = `-- name: GetStripeID :one
SELECT stripe_customer_id FROM users WHERE id = $1
`

func (q *Queries) GetStripeID(ctx context.Context, id uuid.UUID) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getStripeID, id)
	var stripe_customer_id sql.NullString
	err := row.Scan(&stripe_customer_id)
	return stripe_customer_id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, username, email, hashed_password, phone_number, stripe_customer_id FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.PhoneNumber,
		&i.StripeCustomerID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, username, email, hashed_password, phone_number, stripe_customer_id FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.PhoneNumber,
		&i.StripeCustomerID,
	)
	return i, err
}

const getUserByStripeID = `-- name: GetUserByStripeID :one
SELECT id, created_at, updated_at, username, email, hashed_password, phone_number, stripe_customer_id FROM users WHERE stripe_customer_id = $1
`

func (q *Queries) GetUserByStripeID(ctx context.Context, stripeCustomerID sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByStripeID, stripeCustomerID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.PhoneNumber,
		&i.StripeCustomerID,
	)
	return i, err
}

const updateStripeCustomerID = `-- name: UpdateStripeCustomerID :exec
UPDATE users
SET stripe_customer_id = $2
WHERE id = $1
`

type UpdateStripeCustomerIDParams struct {
	ID               uuid.UUID
	StripeCustomerID sql.NullString
}

func (q *Queries) UpdateStripeCustomerID(ctx context.Context, arg UpdateStripeCustomerIDParams) error {
	_, err := q.db.ExecContext(ctx, updateStripeCustomerID, arg.ID, arg.StripeCustomerID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    updated_at = NOW(),
    username = $1,
    email = $2,
    hashed_password = $3,
    phone_number = $4
WHERE id = $5
RETURNING id, created_at, updated_at, username, email, hashed_password, phone_number, stripe_customer_id
`

type UpdateUserParams struct {
	Username       string
	Email          string
	HashedPassword string
	PhoneNumber    string
	Userid         uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
		arg.PhoneNumber,
		arg.Userid,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.PhoneNumber,
		&i.StripeCustomerID,
	)
	return i, err
}
