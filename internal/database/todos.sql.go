// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: todos.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (id, user_id, created_at, updated_at, date, title, description)
VALUES (
    gen_random_uuid(),
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4
)
RETURNING id, user_id, created_at, updated_at, date, title, description
`

type CreateTodoParams struct {
	UserID      uuid.UUID
	Date        sql.NullTime
	Title       string
	Description sql.NullString
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.UserID,
		arg.Date,
		arg.Title,
		arg.Description,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Date,
		&i.Title,
		&i.Description,
	)
	return i, err
}

const deleteTodoByID = `-- name: DeleteTodoByID :exec
DELETE FROM todos WHERE id = $1
`

func (q *Queries) DeleteTodoByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTodoByID, id)
	return err
}

const deleteTodos = `-- name: DeleteTodos :exec
DELETE FROM todos
`

func (q *Queries) DeleteTodos(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteTodos)
	return err
}

const getTodoByID = `-- name: GetTodoByID :one
SELECT id, user_id, created_at, updated_at, date, title, description FROM todos WHERE id = $1
`

func (q *Queries) GetTodoByID(ctx context.Context, id uuid.UUID) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoByID, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Date,
		&i.Title,
		&i.Description,
	)
	return i, err
}

const getTodosByUserID = `-- name: GetTodosByUserID :many
SELECT id, user_id, created_at, updated_at, date, title, description FROM todos WHERE user_id = $1
`

func (q *Queries) GetTodosByUserID(ctx context.Context, userID uuid.UUID) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodosByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Date,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateToDo = `-- name: UpdateToDo :one
UPDATE todos
SET
    updated_at = NOW(),
    date = $1,
    title = $2,
    description = $3
WHERE id = $4
RETURNING id, user_id, created_at, updated_at, date, title, description
`

type UpdateToDoParams struct {
	Date        sql.NullTime
	Title       string
	Description sql.NullString
	TodoID      uuid.UUID
}

func (q *Queries) UpdateToDo(ctx context.Context, arg UpdateToDoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateToDo,
		arg.Date,
		arg.Title,
		arg.Description,
		arg.TodoID,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Date,
		&i.Title,
		&i.Description,
	)
	return i, err
}
