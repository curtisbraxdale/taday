// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tags.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createEventTag = `-- name: CreateEventTag :one
INSERT INTO event_tags (event_id, tag_id)
VALUES (
    $1,
    $2
)
RETURNING event_id, tag_id
`

type CreateEventTagParams struct {
	EventID uuid.UUID
	TagID   uuid.UUID
}

func (q *Queries) CreateEventTag(ctx context.Context, arg CreateEventTagParams) (EventTag, error) {
	row := q.db.QueryRowContext(ctx, createEventTag, arg.EventID, arg.TagID)
	var i EventTag
	err := row.Scan(&i.EventID, &i.TagID)
	return i, err
}

const createTag = `-- name: CreateTag :one
INSERT INTO tags (id, user_id, name, color)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3
)
RETURNING id, user_id, name, color
`

type CreateTagParams struct {
	UserID uuid.UUID
	Name   string
	Color  string
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, arg.UserID, arg.Name, arg.Color)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Color,
	)
	return i, err
}

const deleteEventTag = `-- name: DeleteEventTag :exec
DELETE FROM event_tags WHERE event_id = $1 AND tag_id = $2
`

type DeleteEventTagParams struct {
	EventID uuid.UUID
	TagID   uuid.UUID
}

func (q *Queries) DeleteEventTag(ctx context.Context, arg DeleteEventTagParams) error {
	_, err := q.db.ExecContext(ctx, deleteEventTag, arg.EventID, arg.TagID)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags WHERE id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const getEventTagsByEventID = `-- name: GetEventTagsByEventID :many
SELECT event_id, tag_id FROM event_tags WHERE event_id = $1
`

func (q *Queries) GetEventTagsByEventID(ctx context.Context, eventID uuid.UUID) ([]EventTag, error) {
	rows, err := q.db.QueryContext(ctx, getEventTagsByEventID, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventTag
	for rows.Next() {
		var i EventTag
		if err := rows.Scan(&i.EventID, &i.TagID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsByEventID = `-- name: GetTagsByEventID :many
SELECT tags.id, tags.name, tags.color
FROM event_tags
JOIN tags ON tags.id = event_tags.tag_id
WHERE event_tags.event_id = $1
`

type GetTagsByEventIDRow struct {
	ID    uuid.UUID
	Name  string
	Color string
}

func (q *Queries) GetTagsByEventID(ctx context.Context, eventID uuid.UUID) ([]GetTagsByEventIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getTagsByEventID, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTagsByEventIDRow
	for rows.Next() {
		var i GetTagsByEventIDRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Color); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsByUserID = `-- name: GetTagsByUserID :many
SELECT id, user_id, name, color FROM tags WHERE user_id = $1
`

func (q *Queries) GetTagsByUserID(ctx context.Context, userID uuid.UUID) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
