// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tags.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createEventTag = `-- name: CreateEventTag :one
INSERT INTO event_tags (event_id, tag_id)
VALUES (
    $1,
    $2
)
RETURNING event_id, tag_id
`

type CreateEventTagParams struct {
	EventID uuid.UUID
	TagID   uuid.UUID
}

func (q *Queries) CreateEventTag(ctx context.Context, arg CreateEventTagParams) (EventTag, error) {
	row := q.db.QueryRowContext(ctx, createEventTag, arg.EventID, arg.TagID)
	var i EventTag
	err := row.Scan(&i.EventID, &i.TagID)
	return i, err
}

const createTag = `-- name: CreateTag :one
INSERT INTO tags (id, user_id, name, color)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3
)
RETURNING id, user_id, name, color
`

type CreateTagParams struct {
	UserID uuid.UUID
	Name   string
	Color  string
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, arg.UserID, arg.Name, arg.Color)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Color,
	)
	return i, err
}

const deleteEventTag = `-- name: DeleteEventTag :exec
DELETE FROM event_tags WHERE event_id = $1 AND tag_id = $2
`

type DeleteEventTagParams struct {
	EventID uuid.UUID
	TagID   uuid.UUID
}

func (q *Queries) DeleteEventTag(ctx context.Context, arg DeleteEventTagParams) error {
	_, err := q.db.ExecContext(ctx, deleteEventTag, arg.EventID, arg.TagID)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags WHERE id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}
