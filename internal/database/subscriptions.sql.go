// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subscriptions.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (id, user_id, stripe_customer_id, stripe_subscription_id, plan, status, current_period_start, current_period_end, cancel_at_period_end, canceled_at, trial_start, trial_end, created_at, updated_at)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13
)
RETURNING id, user_id, stripe_customer_id, stripe_subscription_id, plan, status, current_period_start, current_period_end, cancel_at_period_end, canceled_at, trial_start, trial_end, created_at, updated_at
`

type CreateSubscriptionParams struct {
	UserID               uuid.UUID
	StripeCustomerID     string
	StripeSubscriptionID string
	Plan                 string
	Status               string
	CurrentPeriodStart   time.Time
	CurrentPeriodEnd     time.Time
	CancelAtPeriodEnd    bool
	CanceledAt           sql.NullTime
	TrialStart           sql.NullTime
	TrialEnd             sql.NullTime
	CreatedAt            time.Time
	UpdatedAt            time.Time
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscription,
		arg.UserID,
		arg.StripeCustomerID,
		arg.StripeSubscriptionID,
		arg.Plan,
		arg.Status,
		arg.CurrentPeriodStart,
		arg.CurrentPeriodEnd,
		arg.CancelAtPeriodEnd,
		arg.CanceledAt,
		arg.TrialStart,
		arg.TrialEnd,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeCustomerID,
		&i.StripeSubscriptionID,
		&i.Plan,
		&i.Status,
		&i.CurrentPeriodStart,
		&i.CurrentPeriodEnd,
		&i.CancelAtPeriodEnd,
		&i.CanceledAt,
		&i.TrialStart,
		&i.TrialEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSubscriptions = `-- name: DeleteSubscriptions :exec
DELETE FROM subscriptions
`

func (q *Queries) DeleteSubscriptions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteSubscriptions)
	return err
}

const getActiveSubscriptionByUserID = `-- name: GetActiveSubscriptionByUserID :one
SELECT id, user_id, stripe_customer_id, stripe_subscription_id, plan, status, current_period_start, current_period_end, cancel_at_period_end, canceled_at, trial_start, trial_end, created_at, updated_at FROM subscriptions WHERE user_id = $1 AND status = "active"
`

func (q *Queries) GetActiveSubscriptionByUserID(ctx context.Context, userID uuid.UUID) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getActiveSubscriptionByUserID, userID)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeCustomerID,
		&i.StripeSubscriptionID,
		&i.Plan,
		&i.Status,
		&i.CurrentPeriodStart,
		&i.CurrentPeriodEnd,
		&i.CancelAtPeriodEnd,
		&i.CanceledAt,
		&i.TrialStart,
		&i.TrialEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSubscriptionByUserID = `-- name: GetSubscriptionByUserID :one
SELECT id, user_id, stripe_customer_id, stripe_subscription_id, plan, status, current_period_start, current_period_end, cancel_at_period_end, canceled_at, trial_start, trial_end, created_at, updated_at FROM subscriptions WHERE user_id = $1
`

func (q *Queries) GetSubscriptionByUserID(ctx context.Context, userID uuid.UUID) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionByUserID, userID)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeCustomerID,
		&i.StripeSubscriptionID,
		&i.Plan,
		&i.Status,
		&i.CurrentPeriodStart,
		&i.CurrentPeriodEnd,
		&i.CancelAtPeriodEnd,
		&i.CanceledAt,
		&i.TrialStart,
		&i.TrialEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSubscription = `-- name: UpdateSubscription :one
UPDATE subscriptions
SET
    updated_at = NOW(),
    status = $1,
    current_period_start = $2,
    current_period_end = $3,
    cancel_at_period_end = $4,
    canceled_at = $5,
    trial_start = $6,
    trial_end = $7
WHERE user_id = $8
RETURNING id, user_id, stripe_customer_id, stripe_subscription_id, plan, status, current_period_start, current_period_end, cancel_at_period_end, canceled_at, trial_start, trial_end, created_at, updated_at
`

type UpdateSubscriptionParams struct {
	Status             string
	CurrentPeriodStart time.Time
	CurrentPeriodEnd   time.Time
	CancelAtPeriodEnd  bool
	CanceledAt         sql.NullTime
	TrialStart         sql.NullTime
	TrialEnd           sql.NullTime
	UserID             uuid.UUID
}

func (q *Queries) UpdateSubscription(ctx context.Context, arg UpdateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, updateSubscription,
		arg.Status,
		arg.CurrentPeriodStart,
		arg.CurrentPeriodEnd,
		arg.CancelAtPeriodEnd,
		arg.CanceledAt,
		arg.TrialStart,
		arg.TrialEnd,
		arg.UserID,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeCustomerID,
		&i.StripeSubscriptionID,
		&i.Plan,
		&i.Status,
		&i.CurrentPeriodStart,
		&i.CurrentPeriodEnd,
		&i.CancelAtPeriodEnd,
		&i.CanceledAt,
		&i.TrialStart,
		&i.TrialEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userIDFromStripeID = `-- name: UserIDFromStripeID :one
SELECT user_id FROM subscriptions WHERE stripe_customer_id = $1
`

func (q *Queries) UserIDFromStripeID(ctx context.Context, stripeCustomerID string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, userIDFromStripeID, stripeCustomerID)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
