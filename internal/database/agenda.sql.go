// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: agenda.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getAllUserIDs = `-- name: GetAllUserIDs :many
SELECT id FROM users
`

func (q *Queries) GetAllUserIDs(ctx context.Context) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserEventsToday = `-- name: GetUserEventsToday :many
SELECT title, description
FROM events
WHERE user_id = $1
  AND start_date < $2
  AND end_date >= $3
ORDER BY start_date ASC
`

type GetUserEventsTodayParams struct {
	UserID       uuid.UUID
	DatePlus1Day time.Time
	Date         time.Time
}

type GetUserEventsTodayRow struct {
	Title       string
	Description sql.NullString
}

func (q *Queries) GetUserEventsToday(ctx context.Context, arg GetUserEventsTodayParams) ([]GetUserEventsTodayRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserEventsToday, arg.UserID, arg.DatePlus1Day, arg.Date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserEventsTodayRow
	for rows.Next() {
		var i GetUserEventsTodayRow
		if err := rows.Scan(&i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserEventsWeek = `-- name: GetUserEventsWeek :many
SELECT title, description
FROM events
WHERE user_id = $1
  AND start_date < $2
  AND end_date >= $3
ORDER BY start_date ASC
`

type GetUserEventsWeekParams struct {
	UserID        uuid.UUID
	DatePlus7Days time.Time
	Date          time.Time
}

type GetUserEventsWeekRow struct {
	Title       string
	Description sql.NullString
}

func (q *Queries) GetUserEventsWeek(ctx context.Context, arg GetUserEventsWeekParams) ([]GetUserEventsWeekRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserEventsWeek, arg.UserID, arg.DatePlus7Days, arg.Date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserEventsWeekRow
	for rows.Next() {
		var i GetUserEventsWeekRow
		if err := rows.Scan(&i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
